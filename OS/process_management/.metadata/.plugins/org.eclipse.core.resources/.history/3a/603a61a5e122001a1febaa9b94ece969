package process_wireframe;

public class Process {
	private final float burst_time;
	private final float arrival_time;
	private float remaining_execution_time;
	private boolean isComplete;
	
	public float time_in_system;
	
	public Process( float burst_time ){
		this.burst_time = burst_time;
		this.arrival_time = 0;
		this.remaining_execution_time = burst_time;
		this.time_in_system = 0;
		isComplete = false;
	}
	
	public Process( float burst_time, float arrival_time ){
		this.burst_time = burst_time;
		this.arrival_time = arrival_time;
		this.remaining_execution_time = burst_time;
		this.time_in_system = 0;
		isComplete = false;
	}
	
	public void _wait( float waiting_time_period ){
		this.time_in_system+=waiting_time_period;
	}
	
	public void _execute( float clock_cycles ){
		if( !isComplete ){
			if( remaining_execution_time > clock_cycles ){
				remaining_execution_time-=clock_cycles;
				this.time_in_system+=clock_cycles;
				if( remaining_execution_time == 0 )
					isComplete = true;
			}
		}
	}
	
	public void complete_execution(){
		this.time_in_system+=remaining_execution_time;
		remaining_execution_time = 0;
		isComplete = true;
	}
	
	public float get_waiting_time(){
		return time_in_system - arrival_time - burst_time;
	}
	
	public float get_turnaround_time(){
		return time_in_system - arrival_time;
	}
	
}


class SortByArrivalTime implements Comparator<Process> 
{ 
    // Used for sorting in ascending order of 
    // roll number 
    public int compare(Student a, Student b) 
    { 
        return a.rollno - b.rollno; 
    } 
} 
